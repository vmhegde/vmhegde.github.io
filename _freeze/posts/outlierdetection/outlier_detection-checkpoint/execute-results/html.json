{
  "hash": "2a3df27ad617efaed0762de61db5f172",
  "result": {
    "markdown": "---\ntitle: Outlier Detection on Annual Rainfall in Coastal Karnataka\n---\n\nWe use the Shapiro-Wilk test and Isolation Forest to detect outliers in the rainfall data.\n\n::: {.cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport sys\n\nassert sys.version_info >= (3, 7)\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=2}\n``` {.python .cell-code}\nfrom packaging import version\nimport sklearn\n\nassert version.parse(sklearn.__version__) >= version.parse(\"1.0.1\")\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv(\"./coastal_karnataka_rainfall-checkpoint.csv\")\n\ndf.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nIndex(['SUBDIVISION', 'YEAR', 'JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL',\n       'AUG', 'SEP', 'OCT', 'NOV', 'DEC', 'ANNUAL', 'Jan-Feb', 'Mar-May',\n       'Jun-Sep', 'Oct-Dec'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Plotting the earthquake data correlating earthquake depth to earthquake magnitude\n\n::: {.cell tags='[]' execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)\nplt.figure(figsize=(10, 4))\n\nX = df['YEAR']\nX.drop(columns=['YEAR'])\ny = df['ANNUAL']\nplt.scatter(X, y, marker='*')\nplt.xlabel(\"$year$\")\nplt.ylabel(\"$rainfall$\", rotation=90)\n#plt.axis([90, 160, 60, 75])\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](outlier_detection-checkpoint_files/figure-html/cell-5-output-1.png){width=843 height=361}\n:::\n:::\n\n\n## Detecting Outliers by Normalizing the Data\n\nThe Shapiro-Wilk test can be used to check if data is normally distributed. If the data is normally distributed, we can use the mean and standard deviation to detect outliers.\n\n::: {.cell tags='[]' execution_count=5}\n``` {.python .cell-code}\nimport scipy\nimport numpy as np\narr = df.ANNUAL.to_numpy()\narr = arr[~np.isnan(arr)]\nscipy.stats.shapiro(arr)\n# small p-value --> data is normal\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nShapiroResult(statistic=0.9584614634513855, pvalue=0.0013542578089982271)\n```\n:::\n:::\n\n\nBecause the p-value is very small, we can deduce that the data is normally distributed. Thus, we can say that outliers lie 3.5 standard deviations above and below the mean of the distribution.\n\n## Plotting the Kernel Denstiy Estimation\n\nThe Kernel Density Estimation of the data helps us visualize the shape of the data in a smooth curve.\n\n::: {.cell tags='[]' execution_count=6}\n``` {.python .cell-code}\nplt = df.ANNUAL.plot.kde()\nmean = df.ANNUAL.mean()\nstd = df.ANNUAL.std()\n\n# marking outliers\nplt.vlines(x = std*3.5 + mean, ymin = -0.00005, ymax = 0.0008,\n           colors = 'orange',\n           label = 'vline_multiple - full height')\nplt.vlines(x = mean - std*3.5, ymin = -0.00005, ymax = 0.0008,\n           colors = 'orange',\n           label = 'vline_multiple - full height')\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<matplotlib.collections.LineCollection at 0x1fe5c87e198>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](outlier_detection-checkpoint_files/figure-html/cell-7-output-2.png){width=620 height=411}\n:::\n:::\n\n\n## Detecting Outliers using Isolation Forest\n\nThe Isolation Forest algorithm isolates anomalies by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. Outliers are expected to have shorter paths in the tree structure, making them easier to isolate\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\nfrom sklearn.ensemble import IsolationForest\nimport matplotlib.pyplot as plt\n\n# If the dataset has multiple columns for different years, use the following lines to reshape it\n# df_melted = df.melt(id_vars=['SomeIDColumn'], var_name='Year', value_name='Rainfall')\n# df_melted = df_melted.dropna()  # Remove any NaN values\n# column_to_use = 'Rainfall'  # This is the column with rainfall data\n\ndf = df.dropna(subset=['ANNUAL'])\n\n# If there's a single column for rainfall, directly use it\ncolumn_to_use = 'ANNUAL'  # Replace with your actual column name\n\n# Creating an instance of Isolation Forest\niso_forest = IsolationForest(n_estimators=100, contamination='auto', random_state=42)\n\n# Fitting the model on the Rainfall column\niso_forest.fit(df[[column_to_use]])\n\n# Predicting outliers\noutliers = iso_forest.predict(df[[column_to_use]])\n\n# Adding a column to the DataFrame to indicate outliers\ndf['outlier'] = outliers\n\n# Plotting the results\nplt.figure(figsize=(10, 6))\nplt.scatter(df['YEAR'], df[column_to_use], c=df['outlier'], cmap='coolwarm')  # Replace 'Year' if needed\nplt.title('Outlier Detection in Annual Rainfall')\nplt.xlabel('Year')\nplt.ylabel('Rainfall')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](outlier_detection-checkpoint_files/figure-html/cell-8-output-1.png){width=843 height=531}\n:::\n:::\n\n\nThe points marked in blue are outliers according to the Isolation Forest. The blue points help us visualize years with unusual rainfall patterns. This could be due to extreme weather events such as droughts or floods.\n\n",
    "supporting": [
      "outlier_detection-checkpoint_files"
    ],
    "filters": [],
    "includes": {}
  }
}