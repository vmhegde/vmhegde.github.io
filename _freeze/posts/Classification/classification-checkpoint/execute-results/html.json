{
  "hash": "79d238b9ce08a8cbe9e6f5208537b064",
  "result": {
    "markdown": "Classification - Dataset - Texts in different languages - Use classification to predict the language a given text is written in\n\n-   Plot languages against the number of texts in that language\n-   Preprocess the data to remove whitespace and non-letter characters from the texts\n-   TF-IDF: Term Frequency Inverse Document Frequency\n    -   use TF-IDF to transform text into numeric data\n    -   measures the originality of a word by comparing the number of times a particular word appears in a text versus the number of texts that word appears in\n-   Split data into training and test sets\n-   Use SGD (Stochastic Gradient Descent) to classify and make predictions\n-   prediction function\n    -   input - text\n    -   output - language text is written in\n\n::: {.cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nassert sys.version_info >= (3, 7)\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=2}\n``` {.python .cell-code}\nfrom packaging import version\nimport sklearn\n\nassert version.parse(sklearn.__version__) >= version.parse(\"1.0.1\")\n```\n:::\n\n\nFirst we read the input data. The data contains two columns: Text and Language\n\n::: {.cell tags='[]' execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.datasets import fetch_openml\n\ndf = pd.read_csv(\"./Language Detection.csv\")\n```\n:::\n\n\nDataset from Kaggle - Language Detection.csv\n\n::: {.cell tags='[]' execution_count=4}\n``` {.python .cell-code}\nprint(df.keys())\ndf['Text']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Text', 'Language'], dtype='object')\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0         Nature, in the broadest sense, is the natural...\n1        \"Nature\" can refer to the phenomena of the phy...\n2        The study of nature is a large, if not the onl...\n3        Although humans are part of nature, human acti...\n4        [1] The word nature is borrowed from the Old F...\n                               ...                        \n10332    ನಿಮ್ಮ ತಪ್ಪು ಏನು ಬಂದಿದೆಯೆಂದರೆ ಆ ದಿನದಿಂದ ನಿಮಗೆ ಒ...\n10333    ನಾರ್ಸಿಸಾ ತಾನು ಮೊದಲಿಗೆ ಹೆಣಗಾಡುತ್ತಿದ್ದ ಮಾರ್ಗಗಳನ್...\n10334    ಹೇಗೆ ' ನಾರ್ಸಿಸಿಸಮ್ ಈಗ ಮರಿಯನ್ ಅವರಿಗೆ ಸಂಭವಿಸಿದ ಎ...\n10335    ಅವಳು ಈಗ ಹೆಚ್ಚು ಚಿನ್ನದ ಬ್ರೆಡ್ ಬಯಸುವುದಿಲ್ಲ ಎಂದು ...\n10336    ಟೆರ್ರಿ ನೀವು ನಿಜವಾಗಿಯೂ ಆ ದೇವದೂತನಂತೆ ಸ್ವಲ್ಪ ಕಾಣು...\nName: Text, Length: 10337, dtype: object\n```\n:::\n:::\n\n\nNow we create a bar graph showing how many texts of each language are present in the dataset.\n\nBefore running any classification algorithm, we preprocess the data to make sure all of the texts are lowercase, and to remove the texts of any non-letter characters.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)\n\nplt.bar(x=df['Language'].value_counts().index, height=df['Language'].value_counts())\nplt.xlabel('Language')\nplt.ylabel('Number of Texts')\nplt.xticks(rotation=90)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](classification-checkpoint_files/figure-html/cell-6-output-1.png){width=607 height=497}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Text data preprocessing\n# Uniform case, remove symbols and whitespace\ndf['Text'] = df['Text'].str.lower()\ndf['Text'] = df['Text'].str.replace(r'[\\([{})\\]!@#$,\"%^*?:;~`0-9]', '', regex=True)\ndf['Text'] = df['Text'].str.strip()\n```\n:::\n\n\nNow we use the TF-IDF vectorizer to convert the texts into numeric data. TF-IDF looks at how common a word is in a text and how many texts a certain word appears in.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\n# The TF-IDF vectorizer initializing \nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_vectorizer.fit(df['Text'])\nX_tfidf = tfidf_vectorizer.transform(df['Text'])\n```\n:::\n\n\nWe use a Label Encoder to convert each language name to a number.\n\n::: {.cell tags='[]' execution_count=8}\n``` {.python .cell-code}\n# Encoding the target labels (languages)\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(df['Language'])\n```\n:::\n\n\nThen split the data into testing and training sets.\n\n::: {.cell tags='[]' execution_count=9}\n``` {.python .cell-code}\nX_train, X_test, y_train, y_test = X_tfidf[:5000], X_tfidf[5000:], y_encoded[:5000], y_encoded[5000:]\n#X_train, X_test, y_train, y_test = X_tfidf[:5000], X_tfidf[5000:10000], y_num[:5000], y_num[5000:10000]\nX_train_english = (X_train == 1) # True for all English texts, English = 1\n\nprint(y_encoded)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3 3 3 ... 9 9 9]\n```\n:::\n:::\n\n\nNow we use the SGD classifier to train the model.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Training binary classifier\nfrom sklearn.linear_model import SGDClassifier\nimport numpy as np\n\nsgd_clf = SGDClassifier(random_state=42)\nsgd_clf.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nSGDClassifier(random_state=42)\n```\n:::\n:::\n\n\nThis prediction function takes a text as input, and outputs the predicted language that the text is written in.\n\n::: {.cell tags='[]' execution_count=11}\n``` {.python .cell-code}\n# predict languge given text \ndef predict_language(input_text):\n    input_text = input_text.lower() # preprocess input text\n    input_tfidf = tfidf_vectorizer.transform([input_text]) # convert input to numeric data\n    predicted = sgd_clf.predict(input_tfidf) # get encoded prediction\n    predicted_language = label_encoder.inverse_transform(predicted) # decode prediction\n    return predicted_language\n\n#predict_language(X[1400])\n```\n:::\n\n\nGo through the first 500 texts and predict what language they are in. (The first 500 texts in the dataset are all English).\n\n::: {.cell tags='[]' execution_count=12}\n``` {.python .cell-code}\ntexts = []\npredictions = []\n\nfor i in range(500):\n    texts.append(df['Text'][i])\n    predictions.append(predict_language(df['Text'][i]))\n    \nprint(predictions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object), array(['English'], dtype=object)]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "classification-checkpoint_files"
    ],
    "filters": [],
    "includes": {}
  }
}